#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'pwn'
require 'optparse'
require 'uri'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-aAPIKEY', '--api_key=APIKEY', '<Required - OWASP Zap API Key (Tools>Options>API)>') do |a|
    opts[:api_key] = a
  end

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required -  Output Directory for Active Scan Report>') do |o|
    opts[:output_dir] = o
  end

  options.on('-dSWAGGER', '--swagger_definitions=SWAGGER', '<Required - Comma-delimited list of Swagger JSON/YAML files to import>') do |s|
    opts[:swagger_definitions] = s
  end

  options.on('-zZPATH', '--zap_bin_path=ZPATH', '<Optional - Path to zap.sh>') do |z|
    opts[:zap_bin_path] = z
  end

  options.on('-h', '--[no-]headless', '<Optional - Run ZAP and Browser Headless>') do |h|
    opts[:headless] = h
  end

  options.on('-bTYPE', '--browser_type=TYPE', '<Optional - Browser Type <firefox|chrome|headless|rest> (Defaults to firefox)>') do |b|
    opts[:browser_type] = b
  end

  options.on('-D', '--[no-]debug', '<Optional - Enable Debug Output and Do Not Delete Temporary OpenAPI Spec>') do |d|
    opts[:debug] = d
  end

  options.on('-vVERSION', '--openapi_spec_version=VERSION', '<Optional - OpenAPI/Swagger Specification Version (Defaults to 3.0.3)>') do |o|
    opts[:openapi_spec_version] = o
  end

  options.on('-HJSON', '--additional_http_headers=JSON', '<Optional - JSON string of additional HTTP headers to include in requests (e.g. \'{"Header1":"Value1","Header2":"Value2"}\')>') do |h|
    opts[:additional_http_headers] = h
  end

  options.on('-eLIST', '--exclude_paths=LIST', '<Optional - Comma-delimited list of paths to exlude from scanning (e.g. "/api/login, /api/logout, /api/etc")>') do |e|
    opts[:exclude_paths] = e
  end

  options.on('-iURL', '--in_scope=URL', '<Optional - URL regex to include in scope (Defaults to "<target_url>.*")>') do |s|
    opts[:in_scope] = s
  end
end.parse!

if opts.empty?
  puts `#{File.basename($PROGRAM_NAME)} --help`
  exit 1
end

begin
  timestamp = Time.now.strftime('%Y-%m-%d_%H-%M-%S%Z')
  logger = PWN::Plugins::PWNLogger.create

  api_key = opts[:api_key]
  raise 'ERROR: --api_key is required.' if api_key.nil?

  target_url = opts[:target_url]
  raise 'ERROR: --target_url is required.' if target_url.nil?

  output_dir = opts[:output_dir]
  raise 'ERROR: --report_output_dir is required.' if output_dir.nil?

  swagger_definitions = opts[:swagger_definitions]
  raise 'ERROR: --swagger_definitions is required.' if swagger_definitions.nil?

  zap_bin_path = opts[:zap_bin_path]
  headless = opts[:headless] || false
  browser_type = opts[:browser_type] ||= :firefox
  browser_type = browser_type.to_s.downcase.to_sym unless browser_type.is_a?(Symbol)
  debug = opts[:debug] || false

  swagger_defs_arr = swagger_definitions.split(',').map(&:strip)
  scheme = URI.parse(target_url).scheme
  target_host = URI.parse(target_url).host
  base_url = "#{scheme}://#{target_host}"

  openapi_spec_version = opts[:openapi_spec_version]
  openapi_spec_root = File.dirname(swagger_defs_arr.first)
  openapi_spec = "#{openapi_spec_root}/openapi_spec-#{target_host}-#{timestamp}.json"

  PWN::Plugins::OpenAPI.generate_spec(
    spec_paths: swagger_defs_arr,
    base_url: base_url,
    output_json_path: openapi_spec,
    target_version: openapi_spec_version,
    debug: debug
  )

  additional_http_headers = opts[:additional_http_headers]
  exlude_paths = opts[:exclude_paths]
  exlude_paths = exlude_paths.split(',').map(&:strip) if exlude_paths.is_a?(String)

  in_scope = opts[:in_scope] ||= "#{target_url}.*"

  # ------
  # Open ZAP
  if headless
    zap_obj = PWN::Plugins::Zaproxy.start(
      zap_bin_path: zap_bin_path,
      api_key: api_key,
      headless: headless,
      browser_type: :headless
    )
  else
    zap_obj = PWN::Plugins::Zaproxy.start(
      zap_bin_path: zap_bin_path,
      api_key: api_key,
      browser_type: browser_type
    )
  end

  logger.info(zap_obj)

  json_sitemap = PWN::Plugins::Zaproxy.import_openapi_to_sitemap(
    zap_obj: zap_obj,
    openapi_spec: openapi_spec
  )
  raise "ERROR: Failed to import OpenAPI/Swagger spec #{openapi_spec} into ZAP's Sitemap." if json_sitemap.nil? || json_sitemap.empty?

  PWN::Plugins::Zaproxy.add_to_scope(
    zap_obj: zap_obj,
    target_regex: in_scope
  )

  if additional_http_headers.is_a?(String)
    additional_http_headers = JSON.parse(additional_http_headers, symbolize_names: true)
    PWN::Plugins::Zaproxy.inject_additional_http_headers(
      zap_obj: zap_obj,
      target_regex: in_scope,
      headers: additional_http_headers
    )
  end

  PWN::Plugins::Zaproxy.active_scan(
    zap_obj: zap_obj,
    target_url: in_scope,
    exclude_paths: exlude_paths
  )

  # Dump a list of scan issues from Active Scan result
  # scan_issues = PWN::Plugins::Zaproxy.get_scan_issues(zap_obj: zap_obj)
  # puts scan_issues

  # Once DefectDojo begins to support XML report results
  report_types = %i[html markdown xml]
  report_types.each do |report_type|
    PWN::Plugins::Zaproxy.generate_scan_report(
      zap_obj: zap_obj,
      target_url: in_scope,
      report_type: report_type,
      output_dir: output_dir
    )
  end
rescue StandardError => e
  raise e
ensure
  PWN::Plugins::Zaproxy.stop(zap_obj: zap_obj) unless zap_obj.nil?
end
