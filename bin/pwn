#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'pwn'
require 'pry'
require 'yaml'
# require 'colorize'
# require 'tty-prompt'
# require 'tty-reader'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-cPATH', '--yaml-config=PATH', '<Optional - OpenAI YAML File>') do |p|
    opts[:yaml_config_path] = p
  end
end.parse!

begin
  def gen_ps1_proc(opts = {})
    delim = opts[:delim]

    # title = 'pwn'.red.bold
    title = "\001\e[1m\002\001\e[31m\002#{File.basename($PROGRAM_NAME)}\001\e[0m\002"
    # version = PWN::VERSION.cyan
    version = "\001\e[36m\002v#{PWN::VERSION}\001\e[0m\002"
    # dchars = '>>>'.green
    dchars = "\001\e[32m\002>>>\001\e[0m\002"
    # dchars = '***'.yellow if delim == :splat
    dchars = "\001\e[33m\002***\001\e[0m\002" if delim == :splat

    proc do |_target_self, _nest_level, pry|
      pry.config.pwn_repl_line += 1
      line_pad = format(
        '%0.3d',
        pry.config.pwn_repl_line
      )
      line_count = "\001\e[34m\002#{line_pad}\001\e[0m\002" # Blue
      "#{title}[#{version}]:#{line_count} #{dchars} ".to_s.scrub
    end
  end

  class Pry
    # Overwrite Pry::History.push method in History class to get duplicate history entries
    # in order to properly replay automation in this prototyping driver
    class History
      def push(line)
        return line if line.empty? || invalid_readline_line?(line)

        begin
          last_line = @history[-1]
        rescue IndexError
          last_line = nil
        end

        @history << line
        @history_line_count += 1
        @saver.call(line) if !should_ignore?(line) &&
                             Pry.config.history_save

        line
      end
      alias << push
    end
  end

  # Define Custom REPL Commands
  Pry::Commands.create_command 'welcome-banner' do
    description 'Display the random welcome banner, including basic usage.'

    def process
      puts PWN::Banner.welcome
    end
  end

  Pry::Commands.create_command 'toggle-pager' do
    description 'Toggle less on returned objects surpassing the terminal.'

    def process
      pi = pry_instance
      pi.config.pager ? pi.config.pager = false : pi.config.pager = true
    end
  end

  Pry::Commands.create_command 'toggle-chatGPT-debug' do
    description "Display the response_history object while using OpenAI's ChatGPT."

    def process
      pi = pry_instance
      pi.config.chat_gpt_debug ? pi.config.chat_gpt_debug = false : pi.config.chat_gpt_debug = true
      puts 'ChatGPT Debug Enabled.' if pi.config.chat_gpt_debug
      puts 'ChatGPT Debug Disabled.' unless pi.config.chat_gpt_debug
    end
  end

  Pry::Commands.create_command 'toggle-chatGPT-speaks' do
    description 'Use speech capabilities within PWN to speak OpenAI ChatGPT answers.'

    def process
      pi = pry_instance
      pi.config.chat_gpt_speak ? pi.config.chat_gpt_speak = false : pi.config.chat_gpt_speak = true
      print 'ChatGPT Speech Enabled.' if pi.config.chat_gpt_speak
      puts 'ChatGPT Speech Disabled.' unless pi.config.chat_gpt_speak
    end
  end

  Pry::Commands.create_command 'toggle-chatGPT' do
    description "Interact w/ OpenAI's ChatGPT"

    def process
      pi = pry_instance
      pi.config.chat_gpt ? pi.config.chat_gpt = false : pi.config.chat_gpt = true
      puts 'ChatGPT Enabled.' if pi.config.chat_gpt
      puts 'ChatGPT Disabled.' unless pi.config.chat_gpt
    end
  end

  # Define REPL Hooks
  # Welcome Banner Hook
  Pry.config.hooks.add_hook(:before_session, :welcome) do |output, _binding, _pry|
    output.puts PWN::Banner.welcome
  end

  # ChatGPT Hooks
  Pry.config.hooks.add_hook(:before_session, :init_opts) do |_output, _binding, pi|
    if opts[:yaml_config_path] && File.exist?(opts[:yaml_config_path])
      yaml_config_path = opts[:yaml_config_path]
      yaml_config = YAML.load_file(yaml_config_path, symbolize_names: true)
      pi.config.chat_gpt_token = yaml_config[:bearer_token]
    end
  end

  Pry.config.hooks.add_hook(:after_eval, :open_ai_hook) do |request, pi|
    if pi.config.chat_gpt && request
      debug = pi.config.chat_gpt_debug
      token = pi.config.chat_gpt_token
      token ||= ''
      if token.empty?
        token = PWN::Plugins::AuthenticationHelper.mask_password(
          prompt: 'OpenAI API Key'
        )
        pi.config.chat_gpt_token = token
      end

      response_history = pi.config.chat_gpt_response_history
      speak_answer = pi.config.chat_gpt_speak
      response = PWN::Plugins::OpenAI.chat(
        token: token,
        request: request.to_s,
        temp: 1,
        max_tokens: 0,
        response_history: response_history,
        speak_answer: speak_answer
      )
      puts "\n\n\n#{response[:choices].last[:content]}\n\n\n"

      response_history = {
        id: response[:id],
        object: response[:object],
        model: response[:model],
        usage: response[:usage]
      }
      response_history[:choices] ||= response[:choices]

      if debug
        puts 'DEBUG: response_history = '
        pp response_history
        puts "response_history[:choices] Length: #{response_history[:choices].length}\n" unless response_history.nil?
      end
      pi.config.chat_gpt_response_history = response_history
    end
  end

  # Define PS1 Prompt
  Pry.config.pwn_repl_line = 0
  arrow_ps1_proc = gen_ps1_proc
  splat_ps1_proc = gen_ps1_proc(delim: :splat)
  prompt_ps1 = [arrow_ps1_proc, splat_ps1_proc]

  pwn_prompt = Pry::Prompt.new(
    :pwn,
    'PWN Prototyping REPL',
    prompt_ps1
  )

  # Start PWN REPL
  Pry.config.prompt_name = :pwn
  Pry.start(
    self,
    prompt: pwn_prompt
  )
rescue StandardError => e
  raise e
end
