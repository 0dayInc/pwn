#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'pry'
require 'colorize'
# require 'tty-prompt'
# require 'tty-reader'

begin
  def gen_ps1_proc(opts = {})
    delim = opts[:delim]

    title = 'pwn'.red.bold
    version = PWN::VERSION.cyan
    dchars = '>>>'.green
    dchars = '***'.yellow if delim == :splat

    proc do |_target_self, _nest_level, pry|
      pry.config.pwn_repl_line += 1
      line_pad = format(
        '%0.3d',
        pry.config.pwn_repl_line
      )
      line_count = "\001\e[34m\002#{line_pad}\001\e[0m\002" # Blue
      "#{title}[#{version}]:#{line_count} #{dchars} ".to_s.scrub
    end
  end

  class Pry
    # Overwrite Pry::History.push method in History class to get duplicate history entries
    # in order to properly replay automation in this prototyping driver
    class History
      def push(line)
        return line if line.empty? || invalid_readline_line?(line)

        begin
          last_line = @history[-1]
        rescue IndexError
          last_line = nil
        end

        @history << line
        @history_line_count += 1
        @saver.call(line) if !should_ignore?(line) &&
                             Pry.config.history_save

        line
      end
      alias << push
    end
  end

  # Define Custom REPL Commands
  Pry::Commands.create_command 'toggle-pager' do
    description 'Toggle less on returned objects surpassing the terminal.'

    def process
      pi = pry_instance
      pi.config.pager ? pi.config.pager = false : pi.config.pager = true
    end
  end

  # Define REPL Hooks
  Pry.config.hooks.add_hook(:before_session, :welcome) do |output, _binding, _pry|
    output.puts PWN::Banner.get
    output.puts 'Use the #help command & methods for more options.'
    output.puts 'e.g help'
    output.puts 'e.g PWN.help'
    output.puts 'e.g PWN::Plugins.help'
    output.puts 'e.g PWN::Plugins::TransparentBrowser.help'
  end

  # Define PS1 Prompt
  Pry.config.pwn_repl_line = 0
  arrow_ps1_proc = gen_ps1_proc
  splat_ps1_proc = gen_ps1_proc(delim: :splat)
  prompt_ps1 = [arrow_ps1_proc, splat_ps1_proc]

  pwn_prompt = Pry::Prompt.new(
    :pwn,
    'PWN Prototyping REPL',
    prompt_ps1
  )

  # Start PWN REPL
  Pry.config.prompt_name = :pwn
  Pry.start(
    self,
    prompt: pwn_prompt
  )
rescue StandardError => e
  raise e
end
