#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required - Output Directory for Active Scan Report>') do |o|
    opts[:output_dir] = o
  end

  options.on('-eLIST', '--exclude_paths=LIST', '<Optional - Comma-delimited list of paths to exlude from scanning (e.g. "/api/login, /api/logout, /api/etc")>') do |e|
    opts[:exclude_paths] = e
  end

  options.on('-bBPATH', '--burp_path=BPATH', '<Optional - Path to Burp Suite Pro Jar File (Defaults to /opt/burpsuite/burpsuite-pro.jar)>') do |b|
    opts[:burp_jar_path] = b
  end

  options.on('-h', '--[no-]headless', '<Optional - Run Burp and Browser Headless>') do |h|
    opts[:headless] = h
  end

  options.on('-bTYPE', '--browser_type=TYPE', '<Optional - Browser Type <firefox|chrome|headless|rest> (Defaults to chrome)>') do |b|
    opts[:browser_type] = b
  end

  options.on('-s', '--[no-]spider', '<Optional - Crawl / Spider Target Prior to Scanning (Defaults to false)>') do |s|
    opts[:spider] = s
  end

  options.on('-IINST', '--navigation_instruct=INST', '<Optional - Path to Navigation Instructions (e.g. Auth w/ Target - see /pwn/etc/burpsuite/navigation.instruct.EXAMPLE)>') do |i|
    opts[:navigation_instruct] = i
  end

  options.on('-iURL', '--in_scope=URL', '<Optional - URL to add include in scope (Defaults to value of --target_url)>') do |s|
    opts[:in_scope] = s
  end
end.parse!

if opts.empty?
  puts `#{File.basename($PROGRAM_NAME)} --help`
  exit 1
end

begin
  logger = PWN::Plugins::PWNLogger.create

  target_url = opts[:target_url]
  raise 'ERROR: --target_url is required.' if target_url.nil?

  output_dir = opts[:output_dir]
  raise 'ERROR: --report_output_dir is required.' if output_dir.nil?

  exlude_paths = opts[:exclude_paths]
  exlude_paths = exlude_paths.split(',').map(&:strip) if exlude_paths.is_a?(String)
  burp_jar_path = opts[:burp_jar_path]
  headless = opts[:headless] || false
  browser_type = opts[:browser_type] ||= :chrome
  spider = opts[:spider] || false
  navigation_instruct = opts[:navigation_instruct]
  in_scope = opts[:in_scope] ||= target_url

  # ------
  # Open Burp
  if headless
    burp_obj = PWN::Plugins::BurpSuite.start(
      burp_jar_path: burp_jar_path,
      browser_type: :headless
    )
  else
    burp_obj = PWN::Plugins::BurpSuite.start(
      burp_jar_path: burp_jar_path,
      browser_type: browser_type
    )
  end

  logger.info(burp_obj)
  # Disable Proxy Intercepting Capabilities for this Driver
  PWN::Plugins::BurpSuite.disable_proxy(burp_obj: burp_obj)

  # Add URL to Target >> Scope >> Inclue in scope
  PWN::Plugins::BurpSuite.add_to_scope(
    burp_obj: burp_obj,
    target_url: in_scope
  )

  # Use a headless browser w/ JavaScript Support to Load Our Target
  # and Optionally Authenticate to Provide the Capability to Conduct
  # a Burp Active Scan in a Post-AuthN state.  Since our browsers
  # support JavaScript, DOM-based XSS vuln attempts are
  # possible as well since we have a DOM to interact w/
  # (Burp's DOM-XSS checks are based on static code analysis)
  browser_obj = burp_obj[:burp_browser]
  browser = browser_obj[:browser]
  browser.goto(target_url)

  unless navigation_instruct.nil?
    File.read(navigation_instruct).each_line do |instruction|
      # Look for any set method in this instruction and replace its value w/ asterisks
      redact_regex = /\.set\(['"]([^'"]*)['"]\)/
      redacted_instruction = instruction.gsub(redact_regex, ".set('********')")
      print "\nExecuting Instruction: #{redacted_instruction}"
      browser.instance_eval(instruction.to_s.scrub.strip.chomp)
    end
  end

  PWN::Plugins::BurpSuite.spider(burp_obj: burp_obj, target_url: in_scope) if spider
  PWN::Plugins::BurpSuite.active_scan(
    burp_obj: burp_obj,
    target_url: in_scope,
    exclude_paths: exlude_paths
  )

  # Dump a list of scan issues from Active Scan result
  # scan_issues = PWN::Plugins::BurpSuite.get_scan_issues(burp_obj: burp_obj)
  # puts scan_issues

  # Once DefectDojo begins to support XML report results
  report_types = %i[html xml]
  report_types.each do |report_type|
    PWN::Plugins::BurpSuite.generate_scan_report(
      burp_obj: burp_obj,
      target_url: in_scope,
      report_type: report_type,
      output_dir: output_dir
    )
  end

  burp_obj = PWN::Plugins::BurpSuite.stop(burp_obj: burp_obj)
rescue StandardError => e
  raise e
ensure
  burp_obj = PWN::Plugins::BurpSuite.stop(burp_obj: burp_obj) unless burp_obj.nil?
end
