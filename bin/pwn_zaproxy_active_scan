#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'optparse'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-aAPIKEY', '--api_key=APIKEY', '<Required - OWASP Zap API Key (Tools>Options>API)>') do |a|
    opts[:api_key] = a
  end

  options.on('-tTARGET', '--target_url=TARGET', '<Required - Target URI to Scan>') do |t|
    opts[:target_url] = t
  end

  options.on('-oDIR', '--report_output_dir=DIR', '<Required - Output Directory for Active Scan Report>') do |o|
    opts[:output_dir] = o
  end

  options.on('-eLIST', '--exclude_paths=LIST', '<Optional - Comma-delimited list of paths to exlude from scanning (e.g. "/api/login, /api/logout, /api/etc")>') do |e|
    opts[:exclude_paths] = e
  end

  options.on('-zZPATH', '--zap_bin_path=ZPATH', '<Optional - Path to zap.sh>') do |z|
    opts[:zap_bin_path] = z
  end

  options.on('-h', '--[no-]headless', '<Optional - Run OWASP Zap Headless>') do |h|
    opts[:headless] = h
  end

  options.on('-bTYPE', '--browser_type=TYPE', '<Optional - Browser Type <firefox|chrome|headless|rest> (Defaults to chrome)>') do |b|
    opts[:browser_type] = b
  end

  options.on('-s', '--[no-]spider', '<Optional - Crawl / Spider Target Prior to Scanning (Defaults to false)>') do |s|
    opts[:spider] = s
  end

  options.on('-IINST', '--navigation_instruct=INST', '<Optional - Path to Navigation Instructions (e.g. Auth w/ Target - see /pwn/etc/owasp_zap/navigation.instruct.EXAMPLE)>') do |i|
    opts[:navigation_instruct] = i
  end

  options.on('-iURL', '--in_scope=URL', '<Optional - URL to add include in scope (Defaults to value of --target_url)>') do |s|
    opts[:in_scope] = s
  end
end.parse!

if opts.empty?
  puts `#{File.basename($PROGRAM_NAME)} --help`
  exit 1
end

begin
  logger = PWN::Plugins::PWNLogger.create

  api_key = opts[:api_key]
  raise 'ERROR: --api_key is required.' if api_key.nil?

  if opts[:browser_type].nil?
    browser_type = :chrome
  else
    browser_type = opts[:browser_type].to_s.strip.chomp.scrub.to_sym
  end

  target_url = opts[:target_url]
  raise 'ERROR: --target_url is required.' if target_url.nil?

  output_dir = opts[:output_dir]
  raise 'ERROR: --report_output_dir is required.' if output_dir.nil?

  exlude_paths = opts[:exclude_paths]
  exlude_paths = exlude_paths.split(',').map(&:strip) if exlude_paths.is_a?(String)
  zap_bin_path = opts[:zap_bin_path].to_s.strip.chomp.scrub if File.exist?(opts[:zap_bin_path].to_s.strip.chomp.scrub)
  headless = opts[:headless] || false
  browser_type = opts[:browser_type] ||= :chrome
  spider = opts[:spider] || false
  navigation_instruct = opts[:navigation_instruct]
  in_scope = opts[:in_scope] ||= target_url

  # ------
  # Dynamically build arguments hash based on flags passed and Open Zap
  if headless
    zap_obj = PWN::Plugins::Zaproxy.start(
      zap_bin_path: zap_bin_path,
      api_key: api_key,
      headless: headless,
      browser_type: :headless
    )
  else
    zap_obj = PWN::Plugins::Zaproxy.start(
      zap_bin_path: zap_bin_path,
      api_key: api_key,
      browser_type: browser_type
    )
  end

  logger.info(zap_obj)

  browser_obj = zap_obj[:zap_browser]
  browser = browser_obj[:browser]
  browser.goto(target_url)

  if navigation_instruct
    File.read(navigation_instruct).each_line do |instruction|
      # Look for any set method in this instruction and replace its value w/ asterisks
      redact_regex = /\.set\(['"]([^'"]*)['"]\)/
      redacted_instruction = instruction.gsub(redact_regex, ".set('********')")
      print "\nExecuting Instruction: #{redacted_instruction}"
      browser.instance_eval(instruction.to_s.scrub.strip.chomp)
    end
  end

  PWN::Plugins::Zaproxy.spider(zap_obj: zap_obj, target_url: target_url) if spider
  PWN::Plugins::Zaproxy.active_scan(
    zap_obj: zap_obj,
    target_url: target_url
  )

  # Generate all Report Types
  report_types = %i[html markdown xml]
  report_types.each do |report_type|
    report_path = PWN::Plugins::Zaproxy.generate_scan_report(
      zap_obj: zap_obj,
      output_dir: output_dir,
      report_type: report_type
    )

    logger.info("Report can be found here: #{report_path}")
  end

  PWN::Plugins::Zaproxy.stop(zap_obj: zap_obj)
rescue StandardError => e
  raise e
ensure
  PWN::Plugins::Zaproxy.stop(zap_obj: zap_obj) unless zap_obj.nil?
  browser_obj = PWN::Plugins::TransparentBrowser.close(browser_obj: browser_obj) unless browser_obj.nil?
end
