#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'optparse'
require 'yaml'
require 'json'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-cYAML', '--config-yaml=YAML', '<Required - YAML config containing api_key from Shodan.io>') do |y|
    opts[:yaml] = y
  end

  options.on('-qFILE', '--query-file=FILE', '<Required - File containing one Shodan.io query string per line>') do |q|
    opts[:query_file] = q
  end

  options.on('-rFLOAT', '--rate-limit=FLOAT', '<Optional - Rate Limit Between API Calls (Default: 1.0, must be >= 1.0)>') do |r|
    opts[:rate_limit_duration] = r
  end

  options.on('-oFILE', '--output-results-file=FILE', '<Optional - Defaults to ./shodan-results-Time.now.strftime("%y-%m-%d.%H:%M:%S").txt>') do |o|
    opts[:output_results_file] = o
  end
end.parse!

if opts.empty?
  puts `#{File.basename($PROGRAM_NAME)} --help`
  exit 1
end

begin
  yaml_file = opts[:yaml].to_s
  raise "ERROR: #{yaml_file} does not exist." unless File.exist?(yaml_file)

  yaml = YAML.load_file(yaml_file, symbolize_names: true)

  api_key = yaml[:api_key]

  query_file = opts[:query_file].to_s
  raise "ERROR: #{query_file} does not exist." unless File.exist?(query_file)

  rate_limit_duration = opts[:rate_limit_duration].to_f
  rate_limit_duration = 1.0 if rate_limit_duration.zero?
  raise 'ERROR: Rate Limit must be >= 1.0' unless rate_limit_duration.positive?

  # Strip comments from query file when reading
  queries = File.readlines(query_file).grep_v(/^#.*$/)

  timestamp = Time.now.strftime('%Y-%m-%d.%H:%M:%S')
  query_results_file = opts[:output_results_file]
  query_results_file ||= "./shodan-results-#{timestamp}"

  raw_query_results_arr_file = "#{query_results_file}-RAW.arr"
  raw_query_results_file = "#{query_results_file}-RAW.json"
  raw_results_arr = []
  File.open(query_results_file, 'w') do |f|
    queries.each do |query_line|
      query = query_line.chomp
      print "QUERY: '#{query}'"
      f.puts("QUERY: '#{query}'")
      search_results = PWN::Plugins::Shodan.search(
        api_key: api_key,
        query: query
      )
      puts " >>> Matches: #{search_results[:total]}"

      raw_results = {}
      raw_results[:query] = query
      raw_results[:results] = search_results
      raw_results_arr.push(raw_results)

      search_results[:matches].select do |m|
        f.puts "ORG: #{m[:org]} | PUBIP: #{m[:ip_str]} #{'*' * 36}"
        f.puts "Product: #{m[:product]}"
        f.puts "TCP Port: #{m[:port]}"
        f.puts "Data: #{m[:data]}\n\n\n"
      end

      sleep rate_limit_duration
    end
  end
  File.write(raw_query_results_arr_file, raw_results_arr)

  # TODO: Avoid JSON::GeneratorError: source sequence is illegal/malformed utf-8
  # in rare circumstances
  File.write(raw_query_results_file, JSON.pretty_generate(raw_results_arr))
rescue JSON::GeneratorError => e
  puts '!!! SERIALIZATION DEBUG MODE !!!'
  raw_results_arr.each do |r|
    JSON.pretty_generate(r)
  rescue JSON::GeneratorError => e
    puts "#{e.message} FOUND IN: #{r.inspect}"
  end
rescue SystemExit, Interrupt
  puts "\nGoodbye."
end
