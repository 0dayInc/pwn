#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'optparse'
require 'htmlentities'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-uGITURI', '--uri-source-root=GITURI', '<Required - HTTP URI of Git Repo Scanned e.g. https://github.com/0dayInc/pwn/tree/master>') do |u|
    opts[:uri_source_root] = u
  end

  options.on('-dDIR', '--dir-path=DIR', '<Optional - Report Output Directory (Defaults to ".")>') do |d|
    opts[:dir_path] = d
  end

  options.on('-tTHREADS', '--max-threads=THREADS', '<Optional # Test Cases to Run Simultaneously (Default 25)>') do |t|
    opts[:max_threads] = t
  end

  options.on('-TCASE', '--test-cases=CASE', '<Optional Comma-Delimited Test Cases to Invoke (-l for List)>') do |c|
    opts[:chosen_test_cases] = c
  end

  options.on('-l', '--[no-]list-test-cases', '<Optional List Available Test Cases to Invoke and Exit>') do |l|
    opts[:list_test_cases] = l
  end

  options.on('-nREPORTNAME', '--report-name=REPORTNAME', '<Optional Report Name (Defaults to, "File.basename(Dir.pwd)")>') do |n|
    opts[:report_name] = n
  end

  options.on('-aENGINE', '--ai-engine=ENGINE', '<Optional AI Engine to Analyze Results (grok, ollama, openai) [WARNING: CAN DRAMATICALLY INCREASE AI USAGE COSTS AND/OR SCAN DURATIONS]>') do |a|
    opts[:ai_engine] = a
  end

  options.on('-fFQDN', '--ai-fqdn=FQDN', '<Optional AI FQDN (Only Required for "ollama" AI Engine)>') do |f|
    opts[:ai_fqdn] = f
  end

  options.on('-mMODEL', '--ai-model=MODEL', '<Optional AI Model to Use for Respective AI Engine (e.g., grok-4-0709, grok-3-mini-fast, gpt5-chat-latest, chargpt-4o-latest, llama-3.1, etc.)>') do |m|
    opts[:ai_model] = m
  end

  options.on('-kTOKEN', '--ai-key=TOKEN', '<Optional AI Key/Token for Respective AI Engine>') do |k|
    opts[:ai_key] = k
  end

  options.on('-SCONTENT', '--ai-system-content=CONTENT', '<Optional AI System Role Content for Respective AI Engine>') do |s|
    opts[:ai_system_role_content] = s
  end

  options.on('-FTEMP', '--ai-temp=TEMP', '<Optional AI Temperature for Respective AI Engine (Default 0.9)>') do |t|
    opts[:ai_temp] = t
  end

  options.on('-s', '--[no-]start-reporting-server', '<Optional - Start Simple HTTP Server for Reporting>') do |s|
    opts[:start_reporting_server] = s
  end
end.parse!

if opts.empty?
  puts `#{File.basename($PROGRAM_NAME)} --help`
  exit 1
end

begin
  timestamp = Time.now.strftime('%Y-%m-%d_%H:%M:%S%z')
  previous_dir = Dir.pwd

  pwn_provider = 'ruby-gem'
  # pwn_provider = ENV.fetch('PWN_PROVIDER') if ENV.keys.select { |s| s == 'PWN_PROVIDER' }.any?
  pwn_provider = ENV.fetch('PWN_PROVIDER') if ENV.keys.any? { |s| s == 'PWN_PROVIDER' }

  green = "\e[32m"
  end_of_color = "\e[0m"

  dir_path = opts[:dir_path] ||= '.'
  Dir.chdir(dir_path) unless dir_path == '.'

  uri_source_root = opts[:uri_source_root].to_s.scrub

  max_threads = opts[:max_threads]
  max_threads ||= 25

  chosen_test_cases = opts[:chosen_test_cases]
  list_test_cases = opts[:list_test_cases]

  report_name = opts[:report_name]
  report_name ||= "#{File.basename(Dir.pwd)}-#{timestamp}" if dir_path == '.'
  report_name ||= "#{File.basename(dir_path)}-#{timestamp}" unless dir_path == '.'

  ai_engine = opts[:ai_engine]
  if ai_engine
    ai_engine = ai_engine.to_s.to_sym
    valid_ai_engines = %i[grok ollama openai]
    raise "ERROR: Invalid AI Engine. Valid options are: #{valid_ai_engines.join(', ')}" unless valid_ai_engines.include?(ai_engine)

    ai_fqdn = opts[:ai_fqdn]
    raise 'ERROR: FQDN for Ollama AI engine is required.' if ai_engine == :ollama && ai_fqdn.nil?

    ai_model = opts[:ai_model]
    raise 'ERROR: AI Model is required for AI engine ollama.' if ai_engine == :ollama && ai_model.nil?

    ai_key = opts[:ai_key] ||= PWN::Plugins::AuthenticationHelper.mask_password(prompt: "#{ai_engine} Token")
    ai_system_role_content = opts[:ai_system_role_content]
    ai_temp = opts[:ai_temp]
  end

  start_reporting_server = opts[:start_reporting_server]

  # Define Test Cases to Run & Start Thread Pool
  if chosen_test_cases && !list_test_cases
    test_cases = chosen_test_cases.to_s.scrub.chomp.strip.delete("\s").split(',').map(&:to_sym)
  else
    test_cases = %i[
      AMQPConnectAsGuest
      ApacheFileSystemUtilAPI
      AWS
      BannedFunctionCallsC
      Base64
      BeefHook
      CmdExecutionJava
      CmdExecutionPython
      CmdExecutionRuby
      CmdExecutionScala
      CSRF
      DeserialJava
      Emoticon
      Eval
      Factory
      HTTPAuthorizationHeader
      InnerHTML
      Keystore
      LocalStorage
      LocationHash
      Log4J
      Logger
      MD5
      OuterHTML
      PaddingOracle
      Password
      PHPInputMechanisms
      PHPTypeJuggling
      PomVersion
      Port
      PostMessage
      PrivateKey
      Redirect
      ReDOS
      Shell
      Signature
      SQL
      SSL
      Sudo
      TaskTag
      ThrowErrors
      Token
      TypeScriptTypeJuggling
      Version
      WindowLocationHash
    ].sort.uniq
  end

  if list_test_cases
    test_cases.each { |tc| puts "#{green}#{tc}#{end_of_color}" }
    exit
  end

  raise "ERROR: Invalid Directory #{dir_path}" unless File.directory?(dir_path)

  results_hash = {
    report_name: HTMLEntities.new.encode(
      report_name.to_s.scrub.strip.chomp
    ),
    data: []
  }

  mutex = Mutex.new

  PWN::Plugins::ThreadPool.fill(
    enumerable_array: test_cases,
    max_threads: max_threads
  ) do |test_case|
    sca_arr = PWN::SAST.const_get(
      test_case.to_s.scrub
    ).scan(
      dir_path: dir_path,
      git_repo_root_uri: uri_source_root
    )

    sca_arr.each { |hash_line| mutex.synchronize { results_hash[:data].push(hash_line) } }
  end

  # Generate HTML Report
  print "#{File.basename($PROGRAM_NAME)} Generating Report..."
  PWN::Reports::SAST.generate(
    dir_path: dir_path,
    results_hash: results_hash,
    report_name: report_name,
    ai_engine: ai_engine,
    ai_model: ai_model,
    ai_key: ai_key,
    ai_fqdn: ai_fqdn,
    ai_system_role_content: ai_system_role_content,
    ai_temp: ai_temp
  )
  puts 'complete.'

  # Start Simple HTTP Server (If Requested)
  if start_reporting_server
    listen_ip = '127.0.0.1'
    listen_ip = '0.0.0.0' if pwn_provider == 'docker'
    listen_port = PWN::Plugins::Sock.get_random_unused_port.to_s
    puts "For Scan Results Navigate to: http://127.0.0.1:#{listen_port}/#{report_name}.html"

    system(
      'pwn_simple_http_server',
      '-i',
      listen_ip,
      '-p',
      listen_port
    )
  end
rescue SystemExit, Interrupt
  puts "\nGoodbye."
ensure
  Dir.chdir(previous_dir) unless dir_path == '.'
end
