#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'
require 'optparse'
require 'yaml'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-cYPATH', '--yaml-config=YPATH', '<Required - YAML Config Containing Access & Secret Keys for Authentication>') do |c|
    opts[:yaml_config] = c
  end

  options.on('-nNAME', '--scan-name=NAME', '<Required - YAML Name of Scan to Create>') do |n|
    opts[:scan_name] = n
  end

  options.on('-tVALUE', '--scan-template=VALUE', '<Optional - Canned Scan Template to Use for Scan Creation (Defaults to "Basic Network Scan">') do |t|
    opts[:scan_template] = t
  end

  options.on('-pPOLICY', '--policy-name=POLICY', '<Optional - Policy to Use to Create the Scan (Defaults to "")>') do |p|
    opts[:policy_name] = p
  end

  options.on('-fFOLDER', '--folder-name=FOLDER', '<Optional - Where to Store the Scan (Defaults to "main")>') do |f|
    opts[:folder_name] = f
  end

  options.on('-sSCANNER', '--scanner-name=SCANNER', '<Optional - Scanner to Use (Defaults to "AUTO-ROUTED")>') do |s|
    opts[:scanner_name] = s
  end

  options.on('-nTARGET', '--target-network=TARGET', '<Optional if --scanner other than AUTO-ROUTED, Otherwise Required - Network to Scan (Defaults to "default-network")>') do |n|
    opts[:target_network] = n
  end

  options.on('-lWHEN', '--launch=WHEN', '<Optional When to Launch Scan - ON_DEMAND || DAILY || WEEKLY || MONTHLY || YEARLY (Defaults to "ON_DEMAND")>') do |l|
    opts[:launch] = l
  end

  options.on('-wTIME', '--scan-time-window=TIME', '<Optional Scan Time Window in Minutes - (Defaults to 0 if nessus scanner scan || 180 if nessus agent scan)>') do |l|
    opts[:launch] = l
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

begin
  yaml_config = opts[:yaml_config]

  raise "YAML Config Not Found: #{yaml_config}" unless File.exist?(yaml_config)

  yaml = YAML.load_file(
    yaml_config,
    symbolize_names: true
  )

  access_key = yaml[:access_key]
  secret_key = yaml[:secret_key]

  scan_name = opts[:scan_name]

  scan_template = opts[:scan_template]
  scan_template ||= 'Basic Network Scan'

  policy_name = opts[:policy_name]
  policy_name ||= ''

  folder_name = opts[:folder_name]
  folder_name ||= 'main'

  scanner_name = opts[:scanner_name]
  scanner_name ||= 'AUTO-ROUTED'

  target_network = opts[:target_network]
  target_network ||= '00000000-0000-0000-0000-000000000000'
  target_network = '00000000-0000-0000-0000-000000000000' if target_network == 'default-network'

  launch = opts[:launch]
  launch ||= 'ON_DEMAND'

  scan_time_window = opts[:scan_time_window]

  nessus_obj = PWN::Plugins::NessusCloud.login(
    access_key: access_key,
    secret_key: secret_key
  )

  scan_template = PWN::Plugins::NessusCloud.get_canned_scan_templates(
    nessus_obj: nessus_obj,
    title: scan_template
  )
  scan_template_id = scan_template[:uuid]
  puts scan_template_id

  policy = PWN::Plugins::NessusCloud.get_policies(
    nessus_obj: nessus_obj,
    name: policy_name
  )
  policy_id = policy[:id]
  puts policy_id

  folder = PWN::Plugins::NessusCloud.get_folders(
    nessus_obj: nessus_obj,
    name: folder_name
  )
  folder_id = folder[:id]
  puts folder_id

  scanner = PWN::Plugins::NessusCloud.get_scanners(
    nessus_obj: nessus_obj,
    name: scanner_name
  )
  scanner_id = scanner[:id]
  puts scanner_id

  target_network_list = PWN::Plugins::NessusCloud.get_target_networks(
    nessus_obj: nessus_obj
  )
  puts target_network_list.inspect
rescue Interrupt
  puts 'CTRL+C detected...goodbye.'
rescue StandardError => e
  raise e
end
