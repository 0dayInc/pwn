#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'

opts = PWN::Env[:driver_opts]
OptionParser.new do |options|
  options.banner = "USAGE:
    #{File.basename($PROGRAM_NAME)} [opts]
  "

  options.on('-dDEV', '--block-dev=DEV', '<Optional - SonMicroRFID block device path (defaults to /dev/ttyUSB0)>') do |d|
    opts[:block_dev] = d
  end

  options.on('-bBAUD', '--baud=BAUD', '<Optional - (defaults to 19_200)>') do |b|
    opts[:baud] = b
  end

  options.on('-DDATABITS', '--data-bits=DATABITS', '<Optional - (defaults to 8)>') do |d|
    opts[:data_bits] = d
  end

  options.on('-sSTOPBITS', '--stop-bits=STOPBITS', '<Optional - (defaults to 1)>') do |s|
    opts[:stop_bits] = s
  end

  options.on('-pPARITY', '--parity=PARITY', '<Optional - even|mark|odd|space|none (defaults to none)>') do |p|
    opts[:parity] = p
  end

  options.on('-fFLOWCTRL', '--flow-control=FLOWCTRL', '<Optional - none|hard|soft (defaults to none)>') do |f|
    opts[:flow_control] = f
  end

  options.on('-v', '--verbose', '<Optional - Enable verbose output>') do
    opts[:verbose] = true
  end
end.parse!

begin
  block_dev = opts[:block_dev] if opts[:block_dev] && File.exist?(opts[:block_dev])
  baud = opts[:baud]
  data_bits = opts[:data_bits]
  stop_bits = opts[:stop_bits]
  parity = opts[:parity]
  flow_control = opts[:flow_control]

  son_micro_rfid_obj = PWN::Plugins::SonMicroRFID.connect(
    block_dev: block_dev,
    baud: baud,
    data_bits: data_bits,
    stop_bits: stop_bits,
    parity: parity,
    flow_control: flow_control
  )

  puts "- Welcome to #{File.basename($PROGRAM_NAME)} -"
  if opts[:verbose]
    puts "Connected via: #{block_dev} @ #{son_micro_rfid_obj[:serial_conn].modem_params}"
    puts "Flow Control: #{son_micro_rfid_obj[:serial_conn].flow_control}"
    puts "Signals: #{son_micro_rfid_obj[:serial_conn].signals}"
  end

  exec_resp = PWN::Plugins::SonMicroRFID.exec(
    son_micro_rfid_obj: son_micro_rfid_obj,
    cmd: :firmware
  )

  firmware_decoded = ''
  exec_resp.last[:hex_resp].split.each do |byte_str|
    firmware_decoded += [byte_str].pack('H*')
  end

  puts "Firmware Version: #{firmware_decoded.scrub.strip.chomp}"

  # Main Menu
  menu_msg = ''
  loop do
    unless menu_msg.include?('ERROR')
      exec_resp = PWN::Plugins::SonMicroRFID.exec(
        son_micro_rfid_obj: son_micro_rfid_obj,
        cmd: :antenna_power,
        params: :on
      )
    end

    puts "\n>> MAIN MENU OPTIONS:"
    puts '[(R)ead Tag]'
    puts '[(B)ackup Tag]'
    puts '[(C)lone Tag]'
    puts '[(L)oad Data from File and Write to Tag]'
    puts '[(U)pdate Tag]'
    puts '[(W)arm Reset]'
    puts '[(Q)uit]'
    puts menu_msg
    print 'MAIN MENU OPTION >>> '
    menu_msg = ''
    option = gets.scrub.chomp.strip.upcase.to_sym

    case option
    when :R
      menu_msg = 'READ TAG'
      begin
        rfid_data = PWN::Plugins::SonMicroRFID.read_tag(son_micro_rfid_obj: son_micro_rfid_obj)
        puts "\nRFID Data:"
        puts "Tag ID: #{rfid_data[:tag_id]}"
        puts "Block Data: #{rfid_data[:block_data]}" if rfid_data[:block_data]
      rescue StandardError => e
        menu_msg = "ERROR: Failed to read tag - #{e.message}"
      end
    when :B
      menu_msg = 'BACKUP TAG TO FILE'
      begin
        rfid_data = PWN::Plugins::SonMicroRFID.backup_tag(son_micro_rfid_obj: son_micro_rfid_obj)
        puts "\nBackup successful. RFID Data:"
        puts "Tag ID: #{rfid_data[:tag_id]}"
        puts "Block Data: #{rfid_data[:block_data]}" if rfid_data[:block_data]
      rescue StandardError => e
        menu_msg = "ERROR: Failed to backup tag - #{e.message}"
      end
    when :C
      menu_msg = 'CLONE TAG'
      print 'This will overwrite the target tag. Continue? [y/N]: '
      next unless gets.chomp.strip.upcase == 'Y'

      begin
        rfid_data = PWN::Plugins::SonMicroRFID.clone_tag(son_micro_rfid_obj: son_micro_rfid_obj)
        puts "\nClone successful. RFID Data:"
        puts "Tag ID: #{rfid_data[:tag_id]}"
        puts "Block Data: #{rfid_data[:block_data]}" if rfid_data[:block_data]
      rescue StandardError => e
        menu_msg = "ERROR: Failed to clone tag - #{e.message}"
      end
    when :L
      menu_msg = 'LOAD FROM FILE'
      print 'This will overwrite the target tag. Continue? [y/N]: '
      next unless gets.chomp.strip.upcase == 'Y'

      begin
        rfid_data = PWN::Plugins::SonMicroRFID.load_tag_from_file(son_micro_rfid_obj: son_micro_rfid_obj)
        puts "\nLoad successful. RFID Data:"
        puts "Tag ID: #{rfid_data[:tag_id]}"
        puts "Block Data: #{rfid_data[:block_data]}" if rfid_data[:block_data]
      rescue StandardError => e
        menu_msg = "ERROR: Failed to load tag - #{e.message}"
      end
    when :U
      menu_msg = 'UPDATE TAG'
      print 'This will modify the tag\'s data. Continue? [y/N]: '
      next unless gets.chomp.strip.upcase == 'Y'

      begin
        rfid_data = PWN::Plugins::SonMicroRFID.update_tag(son_micro_rfid_obj: son_micro_rfid_obj)
        puts "\nUpdate successful. RFID Data:"
        puts "Tag ID: #{rfid_data[:tag_id]}"
        puts "Block Data: #{rfid_data[:block_data]}" if rfid_data[:block_data]
      rescue StandardError => e
        menu_msg = "ERROR: Failed to update tag - #{e.message}"
      end
    when :W
      menu_msg = 'WARM RESET'
      begin
        exec_resp = PWN::Plugins::SonMicroRFID.exec(
          son_micro_rfid_obj: son_micro_rfid_obj,
          cmd: :reset
        )
        puts 'Warm reset complete.'
      rescue StandardError => e
        menu_msg = "ERROR: Failed to reset - #{e.message}"
      end
    when :Q
      exit
    else
      menu_msg = '****** ERROR: Invalid Menu Option Selected ******'
      exec_resp = PWN::Plugins::SonMicroRFID.exec(
        son_micro_rfid_obj: son_micro_rfid_obj,
        cmd: :antenna_power,
        params: :off
      )
    end
  end
rescue StandardError => e
  puts "ERROR: #{e.message}"
  raise e
rescue SystemExit, Interrupt
  puts "\nGoodbye."
ensure
  PWN::Plugins::SonMicroRFID.disconnect(son_micro_rfid_obj: son_micro_rfid_obj) if son_micro_rfid_obj
end
