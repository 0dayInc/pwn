#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pwn'

opts = PWN::Env[:driver_opts]
PWN::Driver::Parser.new do |options|
  options.on('-sIP', '--ip=IP', '<Required - Jenkins Server IP>') { |s| opts[:ip] = s }

  options.on('-dPORT', '--dest-port=PORT', '<Optional - Jenkins Server Port (Defaults to 8080)>') do |port|
    opts[:port] = port
  end

  options.on('-UUSER', '--username=USER', '<Required - Jenkins Username>') do |user|
    opts[:username] = user
  end

  options.on('-PKEY', '--api-key=KEY', '<Required - Jenkins API Key>') do |api_key|
    opts[:api_key] = api_key
  end

  options.on('-pPLUGIN', '--plugin=PLUGIN', '<Required - Comma-Delimited List of Jenkins Plugins to Install>') do |plugins|
    opts[:plugins] = plugins
  end

  options.on('-L', '--list-available', '<Optional - List Available Jenkins Plugins for Installation>') do |list_available_bool|
    opts[:list_available_bool] = list_available_bool
  end

  options.on('-R', '--restart-jenkins', '<Do not Install Plugins - Just Restart Jenkins - Defaults to false>') do |restart_bool|
    opts[:restart_jenkins] = restart_bool
  end
end.parse!

begin
  ip = opts[:ip].to_s.scrub
  port = opts[:port].to_i
  username = opts[:username]
  api_key = opts[:api_key]
  plugins = opts[:plugins].to_s.scrub
  list_available_bool = true if opts[:list_available_bool] ||= false
  restart_jenkins = true if opts[:restart_jenkins] ||= false

  if port.positive?
    jenkins_obj = PWN::Plugins::Jenkins.connect(
      ip: ip,
      port: port,
      username: username,
      api_key: api_key
    )
  else
    jenkins_obj = PWN::Plugins::Jenkins.connect(
      ip: ip,
      username: username,
      api_key: api_key
    )
  end

  if restart_jenkins
    puts 'Restarting Jenkins...'
    jenkins_obj.system.restart
    exit 0
  end

  if list_available_bool
    puts jenkins_obj.plugin.list_available
  else
    plugin_arr = []
    plugins.split(',').each do |p|
      plugin_arr.push(p.strip.chomp)
    end

    jenkins_obj.plugin.install(plugin_arr)
  end
rescue Interrupt
  puts "\nGoodbye."
rescue JenkinsApi::Exceptions::ServiceUnavailable
  puts 'Jenkins Server Unavailable.' unless restart_jenkins
rescue StandardError => e
  raise e
ensure
  PWN::Plugins::Jenkins.disconnect(jenkins_obj: jenkins_obj) unless restart_jenkins
end
