#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'pwn'
require 'pry'
require 'yaml'

opts = {}
OptionParser.new do |options|
  options.banner = "USAGE:
    #{$PROGRAM_NAME} [opts]
  "

  options.on('-cPATH', '--yaml-config=PATH', '<Required - OpenAI YAML File>') do |p|
    opts[:yaml_config_path] = p
  end

  options.on('-d', '--[no-]debug', '<Options - Display response_history Object During Session>') do |d|
    opts[:debug] = d
  end

  options.on('-sSTAGE', '--system-role-content=STAGE', '<Optional - system Role Content Value to Define Behavior of assistant responses (Defaults to value in PWN::Plugins::OpenAI.chat method)>') do |s|
    opts[:system_role_content] = s
  end

  options.on('-S', '--speak-answer', '<Options - Speak Answers (Defaults to false)>') do |v|
    opts[:speak_answer] = v
  end
end.parse!

if opts.empty?
  puts `#{$PROGRAM_NAME} --help`
  exit 1
end

begin
  def gen_ps1_proc(opts = {})
    delim = opts[:delim]

    # title = 'pwn'.red.bold
    title = "\001\e[1m\002\001\e[31m\002#{File.basename($PROGRAM_NAME)}\001\e[0m\002"
    # version = PWN::VERSION.cyan
    version = "\001\e[36m\002v#{PWN::VERSION}\001\e[0m\002"
    # dchars = '>>>'.green
    dchars = "\001\e[32m\002>>>\001\e[0m\002"
    # dchars = '***'.yellow if delim == :splat
    dchars = "\001\e[33m\002***\001\e[0m\002" if delim == :splat

    proc do |_target_self, _nest_level, pry|
      pry.config.pwn_repl_line += 1
      line_pad = format(
        '%0.3d',
        pry.config.pwn_repl_line
      )
      line_count = "\001\e[34m\002#{line_pad}\001\e[0m\002" # Blue
      "#{title}[#{version}]:#{line_count} #{dchars} ".to_s.scrub
    end
  end

  class Pry
    # Overwrite Pry::History.push method in History class to get duplicate history entries
    # in order to properly replay automation in this prototyping driver
    class History
      def push(line)
        return line if line.empty? || invalid_readline_line?(line)

        begin
          last_line = @history[-1]
        rescue IndexError
          last_line = nil
        end

        @history << line
        @history_line_count += 1
        @saver.call(line) if !should_ignore?(line) &&
                             Pry.config.history_save

        line
      end
      alias << push
    end
  end

  # Get OptParse Cli Parameters
  yaml_config_path = opts[:yaml_config_path]
  raise "ERROR: YAML Config => #{yaml_config_path} not found." unless File.exist?(yaml_config_path)

  yaml_config = YAML.load_file(yaml_config_path, symbolize_names: true)
  token = yaml_config[:bearer_token]

  debug = opts[:debug]

  system_role_content = opts[:system_role_content]

  @speak_answer = true if opts[:speak_answer]

  # Define Custom REPL Commands
  Pry::Commands.create_command 'welcome-banner' do
    description 'Display the random welcome banner, including basic usage.'

    def process
      puts PWN::Banner.welcome
    end
  end

  Pry::Commands.create_command 'toggle-pager' do
    description 'Toggle less on returned objects surpassing the terminal.'

    def process
      pi = pry_instance
      pi.config.pager ? pi.config.pager = false : pi.config.pager = true
    end
  end

  # Define REPL Hooks
  Pry.config.hooks.add_hook(:before_session, :welcome) do |output, _binding, _pry|
    output.puts PWN::Banner.welcome
  end

  @response_history = nil
  @keep_in_memory = 0
  Pry.config.hooks.add_hook(:after_eval, :open_ai_hook) do |request, _pry|
    if request.instance_of?(String)
      unless @response_history.nil?
        choices_len = @response_history[:choices].length
        @keep_in_memory = choices_len * -1
      end

      response = PWN::Plugins::OpenAI.chat(
        token: token,
        system_role_content: system_role_content,
        request: request.to_s,
        temp: 1,
        max_tokens: 0,
        response_history: @response_history,
        speak_answer: @speak_answer
      )
      puts "\n\n\n#{response[:choices].last[:content]}\n\n\n"

      @response_history = {
        id: response[:id],
        object: response[:object],
        model: response[:model],
        usage: response[:usage]
      }
      @response_history[:choices] ||= response[:choices]
    end
  end

  if debug
    Pry.config.hooks.add_hook(:after_eval, :open_ai_hook_resp) do |_request, _pry|
      puts 'DEBUG: @response_history = '
      pp @response_history
      puts "@response_history[:choices] Length: #{@response_history[:choices].length}\n" unless @response_history.nil?
    end
  end

  # Define PS1 Prompt
  Pry.config.pwn_repl_line = 0
  arrow_ps1_proc = gen_ps1_proc
  splat_ps1_proc = gen_ps1_proc(delim: :splat)
  prompt_ps1 = [arrow_ps1_proc, splat_ps1_proc]

  pwn_prompt = Pry::Prompt.new(
    :pwn_chat,
    'PWN Prototyping REPL w/ OpenAI Assistant',
    prompt_ps1
  )

  # Start PWN REPL
  Pry.config.prompt_name = :pwn_chat
  Pry.start(
    self,
    prompt: pwn_prompt
  )
rescue StandardError => e
  raise e
end
